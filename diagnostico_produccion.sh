#!/bin/bash

echo "üîç === DIAGN√ìSTICO DE PRODUCCI√ìN SERVICIOUCMC.ONLINE ==="
echo ""

# Test 1: Conectividad b√°sica
echo "1Ô∏è‚É£ Verificando conectividad al dominio..."
if ping -c 3 servicioucmc.online > /dev/null 2>&1; then
    echo "‚úÖ Dominio servicioucmc.online responde"
else
    echo "‚ùå Dominio servicioucmc.online NO responde"
fi
echo ""

# Test 2: Verificar servidor web principal
echo "2Ô∏è‚É£ Verificando servidor web principal..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://servicioucmc.online/ 2>/dev/null || echo "000")
echo "üì° Status HTTPS principal: $HTTP_STATUS"

if [ "$HTTP_STATUS" = "200" ]; then
    echo "‚úÖ Servidor web principal funcionando"
else
    echo "‚ùå Servidor web principal con problemas"
fi
echo ""

# Test 3: Verificar endpoint API base
echo "3Ô∏è‚É£ Verificando endpoint API base..."
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://servicioucmc.online/api/ 2>/dev/null || echo "000")
echo "üì° Status API base: $API_STATUS"

if [ "$API_STATUS" = "200" ] || [ "$API_STATUS" = "404" ]; then
    echo "‚úÖ API endpoint responde (esperado 200 o 404)"
else
    echo "‚ùå API endpoint NO responde"
fi
echo ""

# Test 4: Verificar endpoint espec√≠ficos cr√≠ticos
echo "4Ô∏è‚É£ Verificando endpoints cr√≠ticos..."

# Login endpoint
LOGIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST https://servicioucmc.online/api/auth/login 2>/dev/null || echo "000")
echo "üîê /api/auth/login: $LOGIN_STATUS"

# Health check si existe
HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://servicioucmc.online/api/health 2>/dev/null || echo "000")
echo "üíö /api/health: $HEALTH_STATUS"

# Profesor controles
PROF_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://servicioucmc.online/api/profesor/controles-asignados 2>/dev/null || echo "000")
echo "üë®‚Äçüè´ /api/profesor/controles-asignados: $PROF_STATUS"

echo ""

# Test 5: Verificar headers de respuesta
echo "5Ô∏è‚É£ Verificando headers de respuesta API..."
curl -s -I https://servicioucmc.online/api/auth/login 2>/dev/null | head -5
echo ""

# Test 6: Verificar CORS
echo "6Ô∏è‚É£ Verificando configuraci√≥n CORS..."
CORS_RESPONSE=$(curl -s -H "Origin: https://servicioucmc.online" -H "Access-Control-Request-Method: POST" -H "Access-Control-Request-Headers: Content-Type,Authorization" -X OPTIONS https://servicioucmc.online/api/auth/login 2>/dev/null)
echo "üåê Respuesta CORS OPTIONS:"
echo "$CORS_RESPONSE"
echo ""

# Test 7: Verificar certificado SSL
echo "7Ô∏è‚É£ Verificando certificado SSL..."
SSL_INFO=$(echo | openssl s_client -servername servicioucmc.online -connect servicioucmc.online:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Certificado SSL v√°lido:"
    echo "$SSL_INFO"
else
    echo "‚ùå Problemas con certificado SSL"
fi
echo ""

# Test 8: Verificar configuraci√≥n DNS
echo "8Ô∏è‚É£ Verificando configuraci√≥n DNS..."
nslookup servicioucmc.online
echo ""

echo "üîç === FIN DEL DIAGN√ìSTICO ==="
echo ""
echo "üí° INSTRUCCIONES:"
echo "1. Si el dominio no responde ‚Üí Verificar servidor/hosting"
echo "2. Si API endpoints dan 000 ‚Üí Verificar backend Go en el servidor"
echo "3. Si CORS falla ‚Üí Verificar configuraci√≥n CORS en Go backend"
echo "4. Si SSL falla ‚Üí Verificar certificado del servidor"
echo ""
echo "üöÄ PR√ìXIMOS PASOS RECOMENDADOS:"
echo "- Verificar que el backend Go est√© ejecut√°ndose en el servidor"
echo "- Revisar logs del servidor en /var/log/"
echo "- Verificar configuraci√≥n de Nginx/Apache"
echo "- Comprobar conexi√≥n a base de datos PostgreSQL"