version: '3.8'

services:
  # PostgreSQL Database - PRODUCCIÃ“N PUERTO 5433
  postgres:
    image: postgres:16-alpine
    container_name: app_derecho_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-app_derecho_db}
      POSTGRES_USER: ${DB_USER:-app_derecho_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-app_derecho_pass_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-app_derecho_user} -d ${DB_NAME:-app_derecho_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: app_derecho_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass_2025}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Backend
  backend:
    build:
      context: ./go-backend
      dockerfile: Dockerfile
      target: runtime
    container_name: app_derecho_backend
    restart: unless-stopped
    environment:
      SERVER_PORT: 8000
      ENV: production
      GIN_MODE: release
      
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-app_derecho_db}
      DB_USER: ${DB_USER:-app_derecho_user}
      DB_PASSWORD: ${DB_PASSWORD:-app_derecho_pass_2025}
      DB_SSL_MODE: disable
      
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_pass_2025}
      
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-super_secret_jwt_key_2025_consultorio_ucmc}
      JWT_EXPIRATION_TIME: 24h
      
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-upkucmc@gmail.com}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-afcv gkut vdml owfx}
      SMTP_FROM: ${SMTP_FROM:-upkucmc@gmail.com}
    volumes:
      - backend_uploads:/app/storage/uploads
      - backend_logs:/app/storage/logs
    ports:
      - "8001:8000"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
    container_name: app_derecho_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - app_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  backend_logs: