# Dockerfile simplificado para el backend Go (sin BuildKit)
FROM golang:1.23-alpine AS builder

# Instalar dependencias del sistema
RUN apk add --no-cache git ca-certificates tzdata gcc musl-dev

# Configurar directorio de trabajo
WORKDIR /build

# Copiar archivos de dependencias
COPY go.mod go.sum ./

# Descargar dependencias
RUN go mod download

# Copiar código fuente
COPY . .

# Build del binario
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main cmd/main.go

# Stage de producción
FROM alpine:latest

# Instalar dependencias mínimas
RUN apk --no-cache add ca-certificates tzdata curl

# Configurar zona horaria
ENV TZ=America/Bogota
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

WORKDIR /root/

# Copiar binario
COPY --from=builder /build/main .

# Copiar archivos de configuración
COPY --from=builder /build/assets ./assets

# Crear directorios necesarios
RUN mkdir -p /root/storage/uploads /root/storage/logs

# Exponer puerto
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando de inicio
CMD ["./main"]