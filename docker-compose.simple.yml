# Docker Compose simplificado - Sin BuildKit
version: '3.8'

networks:
  consultorio-network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: consultorio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: app_derecho_db
      POSTGRES_USER: app_derecho_user
      POSTGRES_PASSWORD: app_derecho_pass_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - consultorio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_derecho_user -d app_derecho_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: consultorio-redis
    restart: unless-stopped
    command: redis-server --requirepass redis_pass_2025
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - consultorio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Go Backend
  backend:
    build:
      context: ./go-backend
      dockerfile: Dockerfile.simple
    container_name: consultorio-backend
    restart: unless-stopped
    environment:
      # Servidor
      SERVER_PORT: 8000
      ENV: production
      GIN_MODE: release
      
      # Base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: app_derecho_db
      DB_USER: app_derecho_user
      DB_PASSWORD: app_derecho_pass_2025
      DB_SSL_MODE: disable
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_pass_2025
      
      # JWT
      JWT_SECRET_KEY: super_secret_jwt_key_2025_consultorio_ucmc
      JWT_EXPIRATION_TIME: 24h
      
      # SMTP
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: upkucmc@gmail.com
      SMTP_PASSWORD: afcv gkut vdml owfx
      SMTP_FROM: upkucmc@gmail.com
    volumes:
      - backend_uploads:/root/storage/uploads
      - backend_logs:/root/storage/logs
    ports:
      - "8001:8000"
    networks:
      - consultorio-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.simple
    container_name: consultorio-frontend
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - consultorio-network
    depends_on:
      - backend

  # Nginx Proxy (opcional para SSL)
  nginx:
    image: nginx:alpine
    container_name: consultorio-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - consultorio-network
    depends_on:
      - frontend
      - backend
    profiles: ["production"]

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  backend_logs: